class Solution(object):
    def lengthOfLongestSubstring(self, s):
        char_index_map = {}  # To store the last index where each character was seen
        start = 0  # Starting index of the current substring
        max_length = 0  # Maximum length of substring without repeating characters

        for end, char in enumerate(s):
            if char in char_index_map and char_index_map[char] >= start:
                # If the character is repeated and its last occurrence is within the current substring
                start = char_index_map[char] + 1  # Move the start index to the next position after the last occurrence

            char_index_map[char] = end  # Update the last index of the character
            current_length = end - start + 1  # Length of the current substring without repeating characters
            max_length = max(max_length, current_length)  # Update the maximum length

        return max_length
